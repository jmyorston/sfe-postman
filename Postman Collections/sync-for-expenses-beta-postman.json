{
	"info": {
		"_postman_id": "dc645638-25e5-4665-88a0-cac9b4cbab91",
		"name": "Sync For Expenses Beta",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Sync For Expenses Beta",
			"item": [
				{
					"name": "Company Auth",
					"item": [
						{
							"name": "Create Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var resp = JSON.parse(responseBody)\r",
											"\r",
											"// stores the accounting connection as a collection variable\r",
											"pm.collectionVariables.set(\"accountingConnectionId\", resp.dataConnections[0].id)\r",
											"pm.collectionVariables.set(\"companyId\", resp.id)\r",
											""
										],
										"type": "text/javascript",
										"id": "b01e08b5-f002-47db-9e5c-383ea5a28789"
									}
								}
							],
							"id": "87996bfc-31ea-4f2c-9df4-8051aaf278af",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{$randomCompanyName}}\",\r\n  \"platformType\": \"qhyg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}companies",
								"description": "Company creation should occur the moment an SMB of yours initiates the process to connect their accounting software.\n\n- Populate the name value with the ID that you use for the company in your internal system so that itâ€™s easier to identify the Codat company that corresponds to your record of the merchant.\n- You can specify which accounting package they are using through the `platformKey` e.g. `gbol` for Xero and `qhyg` for QuickBooks Online\n- Retain the `companyId` (hereafter referred to as companyId) from the response. It is crucial that you retain this value as you will need it for directing your customers to Link and managing their connections.\n- [Subscribe to an alert](https://docs.codat.io/docs/core-rules-create) for new company connections or use a [redirect parameter](https://docs.codat.io/docs/authentication-redirect#redirect-with-reserved-query-parameters) such as the status code to listen for a successful connection for the company once the user has been successfully authenticated.\n    \n\nYou can read a guide on how to create a Codat company [here](https://docs.codat.io/docs/build-your-own-authentication-journey#step-1-create-a-codat-company-when-a-user-signs-up-to-your-app)."
							},
							"response": []
						},
						{
							"name": "Create partnerExpense Connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae1f64d9-6e61-499b-b0fb-36a35e0873b4",
										"exec": [
											"var resp = JSON.parse(responseBody)\r",
											"\r",
											"// stores the accounting connection as a collection variable\r",
											"pm.collectionVariables.set(\"expenseConnectionId\", resp.id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0c451e64-5ed5-4b87-8541-d1c593363ed8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/connections/partnerexpense",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"connections",
										"partnerexpense"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of Company"
										}
									]
								},
								"description": "The `partnerExpense` connection allows you to push `expense-transaction` datasets to Codat in a standardised way."
							},
							"response": []
						},
						{
							"name": "Get Connections",
							"id": "9f87d73b-bd8c-44f4-8317-41823cfa6e43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}companies/:companyId",
									"host": [
										"{{baseUrl}}companies"
									],
									"path": [
										":companyId"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of Company."
										}
									]
								},
								"description": "If at anypoint you want to see the status of the dataConnections e.g. to ensure your company is still linked before sending data - you can make a request to the dataConnections object.\n\nYou can also subscribe to the webhook rule `DataConnectionStatusChanged` to receive alerts when a company disconnects."
							},
							"response": []
						}
					],
					"id": "aedd3da2-5454-4b08-b4c7-cf01b61f587f",
					"description": "StartFragment\n\nIn Codat, a company represents a business sharing access to their data. Each company can have multiple data connections to different data sources. For example, a business can have one connection to Xero for accounting data and a connection to Plaid for Open banking data.\n\nStartFragment\n\nWith Sync for Expenses each company will have two data connections:\n\n- One will be to their accounting platform\n- The other will be to the partner expense integration\n    \n\n<img src=\"https://content.pstmn.io/b962c926-31c5-4af0-8915-b665d7451480/aW1hZ2UucG5n\" alt=\"\" height=\"406\" width=\"504\">"
				},
				{
					"name": "Config & Mapping",
					"item": [
						{
							"name": "Get Configuration",
							"id": "4715022b-aa2e-4d5f-a3a7-10fffc52c557",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/config",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"config"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of Company."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bank Account",
							"id": "20759710-dc9a-4319-8263-422a6e5a0b12",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						},
						{
							"name": "GET Customers",
							"id": "c724c120-a380-4c5e-a43b-afac860b8710",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}companies/:companyId/data/customers?query=metadata.isDeleted=false",
									"host": [
										"{{baseUrl}}companies"
									],
									"path": [
										":companyId",
										"data",
										"customers"
									],
									"query": [
										{
											"key": "query",
											"value": "metadata.isDeleted=false"
										}
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of Company."
										}
									]
								},
								"description": "A `customerId` is required in the config to associate all income related activities against.\n\nYou can use this request to retreive a list of available customers from your customers accounting software you can also add additional query parameters e.g.\n\n- `query=metadata.isDeleted=false&&customerName={customerName}`"
							},
							"response": []
						},
						{
							"name": "Create Customer",
							"id": "29fa9e54-af49-400d-8c58-3d53ee8cad7c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"customerName\": \"{{$randomCompanyName}}\",\r\n  \"contactName\": \"{{$randomFirstName}}\",\r\n  \"emailAddress\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"registrationNumber\": \"string\",\r\n  \"taxNumber\": \"string\",\r\n  \"status\": \"Active\",\r\n  \"modifiedDate\": \"{{$isoTimestamp}}\",\r\n  \"sourceModifiedDate\": \"{{$isoTimestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}companies/:companyId/connections/:connectionId/push/customers",
									"host": [
										"{{baseUrl}}companies"
									],
									"path": [
										":companyId",
										"connections",
										":connectionId",
										"push",
										"customers"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of Company."
										},
										{
											"key": "connectionId",
											"value": "{{accountingConnectionId}}",
											"description": "Unique identifier of the accounting connection."
										}
									]
								},
								"description": "In Codat a Customer is a person or an organization that buys goods or services from a company, sync for expenses uses these to track all income related activity against. You can either add the `id` of an existing customer from the accounting software or you can create a new customer and use the `id` returned from the `pushOperationsEndpoint`."
							},
							"response": []
						},
						{
							"name": "GET Suppliers",
							"id": "8f4156ce-9cc7-417a-9c13-1e397ea77c5e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}companies/:companyId/data/suppliers?query=metadata.isDeleted=false",
									"host": [
										"{{baseUrl}}companies"
									],
									"path": [
										":companyId",
										"data",
										"suppliers"
									],
									"query": [
										{
											"key": "query",
											"value": "metadata.isDeleted=false"
										}
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of Company."
										}
									]
								},
								"description": "A `customerId` is required in the config to associate all income related activities against.\n\nYou can use this request to retreive a list of available customers from your customers accounting software you can also add additional query parameters e.g.\n\n- `query=metadata.isDeleted=false&&supplierName={supplierName}`"
							},
							"response": []
						},
						{
							"name": "Create Supplier",
							"id": "31997a74-0fdf-4960-a8e7-46156a04c3bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"supplierName\": \"{{$randomCompanyName}}\",\r\n  \"contactName\": \"{{$randomFirstName}}\",\r\n  \"emailAddress\": \"{{$randomEmail}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"registrationNumber\": \"string\",\r\n  \"taxNumber\": \"string\",\r\n  \"status\": \"Active\",\r\n  \"modifiedDate\": \"{{$isoTimestamp}}\",\r\n  \"sourceModifiedDate\": \"{{$isoTimestamp}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}companies/:companyId/connections/:connectionId/push/suppliers",
									"host": [
										"{{baseUrl}}companies"
									],
									"path": [
										":companyId",
										"connections",
										":connectionId",
										"push",
										"suppliers"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of Company."
										},
										{
											"key": "connectionId",
											"value": "{{accountingConnectionId}}",
											"description": "Unique identifier of the accounting connection."
										}
									]
								},
								"description": "In Codat a Supplier is a person or organization that provides a product or service, sync for expenses uses these to track all purchase and refund related activity against.  \nYou can either add the `id` of an existing customer from the accounting software or you can create a new customer and use the `id` returned from the `pushOperationsEndpoint`."
							},
							"response": []
						},
						{
							"name": "Save Configuration",
							"id": "da6a2dcc-9b30-44d2-8da8-23c8369db41d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"companyId\": \"{{companyId}}\",\r\n    \"accountingSoftwareCompanyName\": null,\r\n    \"enabled\": false,\r\n    \"configured\": true,\r\n    \"schedule\": {\r\n        \"selectedFrequency\": \"Daily\",\r\n        \"frequencyOptions\": [\r\n            \"Daily\"\r\n        ],\r\n        \"startDate\": \"0001-01-01T00:00:00\",\r\n        \"syncHourUtc\": 0,\r\n        \"timeZoneIanaId\": null\r\n    },\r\n    \"configuration\": {\r\n        \"syncAsBankFeeds\": {\r\n            \"enableSync\": false,\r\n            \"selectedBankAccountId\": null,\r\n            \"bankAccountOptions\": []\r\n        },\r\n        \"syncAsExpenses\": {\r\n            \"enableSync\": true,\r\n            \"supplier\": {\r\n                \"selectedSupplierId\": \"124\",\r\n                \"supplierOptions\": []\r\n            },\r\n            \"customer\": {\r\n                \"selectedCustomerId\": \"140\",\r\n                \"customerOptions\": []\r\n            },\r\n            \"selectedBankAccountId\": \"89\",\r\n            \"bankAccountOptions\": []\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/config",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"config"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										}
									]
								},
								"description": "Saving the configuration persists the way your company wants to see their expenses in their accounting software"
							},
							"response": []
						},
						{
							"name": "Save Configuration Copy",
							"id": "085ac50d-90bc-4f48-86ff-a78d2ec86790",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bankAccount\": {\r\n        \"id\": \"171\"\r\n    },\r\n    \"supplier\": {\r\n        \"id\": \"124\"\r\n    },\r\n    \"customer\": {\r\n        \"id\": \"140\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/config",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"config"
									],
									"variable": [
										{
											"id": "b575ff86-f5f7-4c1b-aeb2-86b510c89281",
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										}
									]
								},
								"description": "Saving the configuration persists the way your company wants to see their expenses in their accounting software"
							},
							"response": []
						},
						{
							"name": "Get expense mapping options",
							"id": "3c428e17-ab34-4bdf-a0c1-ee4f6f064166",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/mappingoptions",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"mappingoptions"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										}
									]
								},
								"description": "StartFragment\n\nEvery company will have their own preference on how an individual expense can be represented in their accounting software, you can retrieve these options from theÂ `mappingOptions`Â endpoint.\n\nStartFragment\n\nTheÂ `mappingOptions`Â response can then be cached and the results displayed to your end users when they are finalizing their expenses before exporting."
							},
							"response": []
						}
					],
					"id": "d02ccc2d-400f-4462-a24f-a21d756c25e4"
				},
				{
					"name": "Datasets",
					"item": [
						{
							"name": "Create Expense Dataset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db0e5006-e7a3-45d9-a51d-86ed77c2a5c6",
										"exec": [
											"var resp = JSON.parse(responseBody)\r",
											"\r",
											"pm.collectionVariables.set(\"datasetId\", resp.datasetId)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "541f8149-ae2b-4650-b158-256e308ab8ab",
										"exec": [
											"let uuid = require('uuid');\r",
											"pm.collectionVariables.set(\"transactionId1\", uuid.v4());\r",
											"pm.collectionVariables.set(\"transactionId2\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bd019ef9-9e7f-4a8f-a5b2-6564b273a8b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n   \"items\": [\r\n     {\r\n       \"id\": \"{{transactionId1}}\",\r\n       \"type\": \"Payment\",\r\n       \"issueDate\": \"2023-01-02\",\r\n       \"dateApproved\": \"2023-01-02\",\r\n       \"currency\": \"GBP\",\r\n       \"lines\": [\r\n         {\r\n           \"netAmount\": -23.75,\r\n           \"taxAmount\": -4.75,\r\n           \"taxRateRef\": { \"id\": \"23_Bills\" },\r\n           \"accountRef\": { \"id\": \"88\" },\r\n           \"trackingRefs\": [\r\n             //{ \"id\": \"2f2498b9-f8cc-4985-b6ee-58ca2b32e3e6\" }\r\n           ]\r\n         }\r\n       ]\r\n     }\r\n   ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/data/expense-transactions",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"data",
										"expense-transactions"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										}
									]
								},
								"description": "StartFragment\n\nA dataset is made up of up to 50 expense-transactions - in Sync for Expenses, an expense transaction represents the context behind the purchase.\n\nIt can include details about the purchase, for example:\n\n- Which account in the general ledger the transaction should be reconciled to\n- The associated tax rates\n- Any applicable tracking categories\n    \n\nWhen pushing expenses, use your transactionÂ `id`Â so that it can serve as an idempotency key. Codat validatesÂ `id`'s to ensure that everyÂ `id`Â is unique to a company to prevent duplicate transactions being created.\n\nAll transactions should have positive signage, with the transaction type determining how this affects your customers account balance.\n\nStartFragment\n\n| **TRANSACTION TYPE** | **DESCRIPTION AND USAGE** |\n| --- | --- |\n| **Payment** | Is used to represent any spend that takes place on the account and interest on credit purchases. |\n| **Refund** | Can be used to represent any refunds and returns on an original transaction. |\n| **Reward** | Can be used to represent reward redemption such as points for cash. |\n| **Chargeback** | Is similar, to a refund in behaviour and represents a return of transaction/payment sum which may have been disputed. |\n| **AdjustmentIn** | An adjustment that decreases the balance of the credit account.  <br>Or increases the balance of a bank account. |\n| **AdjustmentOut** | An adjustment that increases the balance of the credit account. Or decreases the balance of a bank account. This Can be used to represent write-off's & transaction adjustments such as foreign exchange adjustments |\n| **TransferIn** | Can be used to represent a top up of debit card account, a pay down of a credit card account. |\n| **TransferOut** | A transfer out could be used for a bank withdrawal balance transfer or similar movement of money from the `selectedBankAccount` |\n\nEndFragment"
							},
							"response": []
						}
					],
					"id": "6547dabf-f95f-4de0-adbf-e2ac60728a13"
				},
				{
					"name": "Syncing Expenses",
					"item": [
						{
							"name": "Initiate Sync",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c06ff967-f900-4eb4-ba55-86725a60be6b",
										"exec": [
											"var resp = JSON.parse(responseBody)\r",
											"\r",
											"pm.collectionVariables.set(\"syncId\", resp.syncId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e080e0e8-f34f-413a-be4f-504e7172fc5f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"datasetIds\": [\r\n     \"{{datasetId}}\"\r\n   ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/syncs",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"syncs"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										}
									]
								},
								"description": "Once you have pushed data to Codat and created datasets you can then initiate the sync process. You can either sync dataset by dataset, or you can provide an array of datasets to sync. You will not be able to queue or initiate another sync when one is ongoing.\n\nThe sync process includes fetching the transactional datasets from the partnerExpense data cache, validating and mapping the data, and then pushing it to the accounting platform."
							},
							"response": []
						},
						{
							"name": "Get Sync Status",
							"id": "f86ff14b-9916-45ed-b265-fa919638d60f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/syncs/:syncId/status",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"syncs",
										":syncId",
										"status"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										},
										{
											"key": "syncId",
											"value": "{{syncId}}",
											"description": "Unique identifier of the companies sync."
										}
									]
								},
								"description": "Once you have pushed data to Codat, you can use the sync status endpoints to check whether the sync was completed successfully and see the details of any errors that may have occurred.\n\nStartFragment\n\nCodat also provides three webhooks which you can subscribe to:\n\n- `SyncÂ Started`: this will be triggered when a sync process for a company starts.\n- `SyncÂ Failed`: This will be triggered if there are any failures during the sync process.\n- `SyncÂ Completed`: This will be triggered when a sync completes without any failures.  \n      \n    \n\nEndFragment"
							},
							"response": []
						},
						{
							"name": "Get Sync Statuses",
							"id": "9c72f384-ead0-4f86-8ab8-602902888cef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/syncs/list/status",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"syncs",
										"list",
										"status"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										}
									]
								},
								"description": "You can also retreive a list of historic syncs for a given company and see the status of these, this can be useful to see when a companies last successful sync took place."
							},
							"response": []
						},
						{
							"name": "GET Transaction Status",
							"id": "0ecc8107-a890-450f-b8a0-a6c48015c309",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{expenseUrl}}companies/:companyId/syncs/:syncId/transactions",
									"host": [
										"{{expenseUrl}}companies"
									],
									"path": [
										":companyId",
										"syncs",
										":syncId",
										"transactions"
									],
									"variable": [
										{
											"key": "companyId",
											"value": "{{companyId}}",
											"description": "Unique identifier of the Company."
										},
										{
											"key": "syncId",
											"value": "{{syncId}}",
											"description": "Unique identifier of the sync."
										}
									]
								},
								"description": "In addition to sync status endpoints, Codat provides a transactions endpoint where you can see the status of individual transactions in a given sync.\n\nThis enables you to see if the transaction has been pushed successfully to the accounting software, or details or the errors associated to the transaction if it was unsuccessful."
							},
							"response": []
						}
					],
					"id": "9783943e-5d17-45ae-b992-b9f1c2cb2476"
				},
				{
					"name": "Upload Receipt",
					"id": "6d13e7b2-77d3-4763-9699-4dd43f3d6cf3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "multi-part",
									"type": "file",
									"value": null
								}
							]
						},
						"url": {
							"raw": "{{expenseUrl}}companies/:companyId/syncs/:syncId/transactions/:transactionId/attachments",
							"host": [
								"{{expenseUrl}}companies"
							],
							"path": [
								":companyId",
								"syncs",
								":syncId",
								"transactions",
								":transactionId",
								"attachments"
							],
							"variable": [
								{
									"key": "companyId",
									"value": "{{companyId}}",
									"description": "Unique identifier of the Company."
								},
								{
									"key": "syncId",
									"value": "{{syncId}}",
									"description": "Unique identifier of the sync."
								},
								{
									"key": "transactionId",
									"value": "{{transactionId1}}",
									"description": "Unique identifier of the transaction."
								}
							]
						},
						"description": "Adding a receipt to the transaction can be done after the sync, different accounting software supports different file formats and sizes so its best to check [here](https://docs.codat.io/docs/datamodel-accounting-attachments#options-for-pushing-attachments-to-the-accounting-platform) for the supported options."
					},
					"response": []
				}
			],
			"id": "95fbcff6-4680-40b9-b003-1e721ddeedcf",
			"auth": {
				"type": "apikey",
				"apikey": {
					"value": "{{codat_api_key_base_64}}",
					"key": "Authorization"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "24988e62-caeb-4463-90c4-0f8db12c3804"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "70734a3f-713e-4437-b07a-c782ee135f85"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "52ccaf39-d912-4cbb-91d9-5e522569170c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5dc8a0ce-370d-4fa1-a264-670b7a5a07a7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "99665690-d3a4-4c30-adaf-b3577f21903e",
			"key": "companyId",
			"value": "00000000-0000-0000-0000-000000000000"
		},
		{
			"id": "9de4f3e1-1d23-4945-9490-d21f0904b4e8",
			"key": "orderId",
			"value": ""
		},
		{
			"id": "cb683365-07c4-4825-9bb9-227444345803",
			"key": "accountingConnectionId",
			"value": ""
		},
		{
			"id": "f8eeb7ea-f3f6-4ae8-bdc8-4f2d8fa059c4",
			"key": "commerceKey",
			"value": "lqai",
			"type": "string"
		},
		{
			"id": "3d4a4629-43e1-4aed-b232-0ce4c4f23c72",
			"key": "accountingKey",
			"value": "gbol",
			"type": "string"
		},
		{
			"id": "172f7476-39a1-4155-953d-6122664f35d9",
			"key": "merchantName",
			"value": "SME Name or ID",
			"type": "string"
		},
		{
			"id": "0474dc4b-c3a7-4b06-95d0-fdcadb2da3cd",
			"key": "platformKey",
			"value": "mqjo",
			"type": "string"
		},
		{
			"id": "122fd9c8-90c6-4860-aa5c-91474245255d",
			"key": "connectionId",
			"value": "",
			"type": "string"
		},
		{
			"id": "b23b1882-600a-45e4-8041-401052deb0c5",
			"key": "expenseUrl",
			"value": "https://expensesync-integration.codat.io/",
			"type": "string"
		},
		{
			"id": "50326bbb-14ff-4c26-86f7-0df144ab233d",
			"key": "baseUrl",
			"value": "https://api-integration.codat.io/",
			"type": "string"
		},
		{
			"id": "865cfc5e-656e-4301-bb6a-ca07d29214bc",
			"key": "expenseConnectionId",
			"value": ""
		},
		{
			"id": "12d35b4f-9870-4c67-8993-a4f42005c927",
			"key": "datasetId",
			"value": "",
			"type": "string"
		},
		{
			"id": "e2c9e6af-7cfa-41d7-babd-bc8d41ed7a13",
			"key": "syncId",
			"value": ""
		},
		{
			"id": "4fe3589a-10ff-4843-b32c-8ca3f54380a1",
			"key": "transactionId",
			"value": ""
		},
		{
			"id": "f3a67263-46da-4aac-b0e7-2b3d2f58e773",
			"key": "transactionId1",
			"value": ""
		},
		{
			"id": "9a612fe4-a741-4b71-9cfc-7606c88802c2",
			"key": "transactionId2",
			"value": ""
		}
	]
}